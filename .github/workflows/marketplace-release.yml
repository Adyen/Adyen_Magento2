name: Marketplace Automation

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  marketplace-automation:
    runs-on: ubuntu-latest
    # environment: internal 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch the latest release
        id: fetch_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # for test only
          # response=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/releases/latest")
          
          # for live only
          response=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }}")
          
          release_url=$(echo $response | jq -r '.zipball_url')
          release_notes=$(echo $response | jq -r '.body')
          release_tagname=$(echo $response | jq -r '.tag_name')

          # Remove 'v' prefix if it exists
          if [[ $release_tagname == v* ]]; then
            release_tagname=${release_tagname#v}
          fi
          
          echo "LATEST_RELEASE_URL=$release_url" >> $GITHUB_OUTPUT
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "$release_notes" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "TAG_NAME=$release_tagname" >> $GITHUB_OUTPUT
          
          echo "Latest Release URL: $release_url"
          echo "Release Notes: $release_notes"
          echo "Tag name: $release_tagname"

      - name: Download the latest release
        run: |
          curl -L ${{ steps.fetch_release.outputs.LATEST_RELEASE_URL }} -o source.zip
          unzip source.zip
          rm source.zip

      - name: Create Archive
        uses: thedoctor0/zip-release@0.7.5
        with:
          type: 'zip'
          filename: 'adyen-magento2-main.zip'
          exclusions: '*.git* *.DS_Store'

      - name: List files for verification
        run: |
          ls -la
          
      - name: Prepare the request payload
        run: |
          touch file-payload && \
          echo "--UNIQUE_BOUNDARY_TOKEN" > file-payload && \
          echo 'Content-Disposition: form-data; name="file[]"; filename="adyen-magento2-main.zip"' >> file-payload && \
          echo 'Content-Type: application/zip' >> file-payload && \
          echo '' >> file-payload && \
          cat adyen-magento2-main.zip >> file-payload && \
          echo '' >> file-payload && \
          echo "--UNIQUE_BOUNDARY_TOKEN--" >> file-payload
        
      - name: Get session token
        id: get_session_token
        env:
          BASE_URL: ${{ secrets.ADOBE_EQP_API_URL }}
          ADOBE_CLIENT_ID: ${{ secrets.ADOBE_CLIENT_ID }}
          ADOBE_CLIENT_SECRET: ${{ secrets.ADOBE_CLIENT_SECRET }}
        run: |
          response=$(curl -X POST \
          -u "${ADOBE_CLIENT_ID}:${ADOBE_CLIENT_SECRET}" \
          -H 'Content-Type: application/json' \
          -d '{ "grant_type" : "session" }' \
          ${BASE_URL}/rest/v1/app/session/token)

          SESSION_TOKEN=$(echo $response | jq -r '.ust')
          echo "SESSION_TOKEN=$SESSION_TOKEN" >> $GITHUB_OUTPUT
          
          echo "Session Token Response: $response"
 
